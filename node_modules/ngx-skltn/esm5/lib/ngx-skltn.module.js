/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { SkltnComponent } from './skltn/skltn.component';
import { SkltnBoneDirective } from './directives/skltn-bone.directive';
import { SkltnService } from './services/skltn.service';
import { SKLTN_CONFIG_TOKEN } from './services/skltn-config.service';
var NgxSkltnModule = /** @class */ (function () {
    function NgxSkltnModule() {
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    NgxSkltnModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        if (config === void 0) { config = {}; }
        return {
            ngModule: NgxSkltnModule,
            providers: [{
                    provide: SKLTN_CONFIG_TOKEN,
                    useValue: config,
                },
                {
                    provide: SkltnService,
                    useClass: SkltnService,
                    deps: [SKLTN_CONFIG_TOKEN],
                }]
        };
    };
    NgxSkltnModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        SkltnComponent,
                        SkltnBoneDirective,
                    ],
                    imports: [
                        CommonModule,
                    ],
                    exports: [
                        SkltnComponent,
                        SkltnBoneDirective,
                    ]
                },] }
    ];
    return NgxSkltnModule;
}());
export { NgxSkltnModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNrbHRuLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1za2x0bi8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtc2tsdG4ubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUV4RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUVyRTtJQUFBO0lBNEJBLENBQUM7Ozs7O0lBZFEsc0JBQU87Ozs7SUFBZCxVQUFlLE1BQWlDO1FBQWpDLHVCQUFBLEVBQUEsV0FBaUM7UUFDOUMsT0FBTztZQUNMLFFBQVEsRUFBRSxjQUFjO1lBQ3hCLFNBQVMsRUFBRSxDQUFDO29CQUNWLE9BQU8sRUFBRSxrQkFBa0I7b0JBQzNCLFFBQVEsRUFBRSxNQUFNO2lCQUNqQjtnQkFDRDtvQkFDRSxPQUFPLEVBQUUsWUFBWTtvQkFDckIsUUFBUSxFQUFFLFlBQVk7b0JBQ3RCLElBQUksRUFBRSxDQUFFLGtCQUFrQixDQUFFO2lCQUM3QixDQUFDO1NBQ0gsQ0FBQztJQUNKLENBQUM7O2dCQTNCRixRQUFRLFNBQUM7b0JBQ1IsWUFBWSxFQUFFO3dCQUNaLGNBQWM7d0JBQ2Qsa0JBQWtCO3FCQUNuQjtvQkFDRCxPQUFPLEVBQUU7d0JBQ1AsWUFBWTtxQkFDYjtvQkFDRCxPQUFPLEVBQUU7d0JBQ1AsY0FBYzt3QkFDZCxrQkFBa0I7cUJBQ25CO2lCQUNGOztJQWdCRCxxQkFBQztDQUFBLEFBNUJELElBNEJDO1NBZlksY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgU2tsdG5Db21wb25lbnQgfSBmcm9tICcuL3NrbHRuL3NrbHRuLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTa2x0bkJvbmVEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvc2tsdG4tYm9uZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgU2tsdG5TZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9za2x0bi5zZXJ2aWNlJztcbmltcG9ydCB7IFNrbHRuQ29uZmlnIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3NrbHRuLWNvbmZpZyc7XG5pbXBvcnQgeyBTS0xUTl9DT05GSUdfVE9LRU4gfSBmcm9tICcuL3NlcnZpY2VzL3NrbHRuLWNvbmZpZy5zZXJ2aWNlJztcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgU2tsdG5Db21wb25lbnQsXG4gICAgU2tsdG5Cb25lRGlyZWN0aXZlLFxuICBdLFxuICBpbXBvcnRzOiBbXG4gICAgQ29tbW9uTW9kdWxlLFxuICBdLFxuICBleHBvcnRzOiBbXG4gICAgU2tsdG5Db21wb25lbnQsXG4gICAgU2tsdG5Cb25lRGlyZWN0aXZlLFxuICBdXG59KVxuZXhwb3J0IGNsYXNzIE5neFNrbHRuTW9kdWxlIHtcbiAgc3RhdGljIGZvclJvb3QoY29uZmlnOiBQYXJ0aWFsPFNrbHRuQ29uZmlnPiA9IHt9KTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBOZ3hTa2x0bk1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW3tcbiAgICAgICAgcHJvdmlkZTogU0tMVE5fQ09ORklHX1RPS0VOLFxuICAgICAgICB1c2VWYWx1ZTogY29uZmlnLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcHJvdmlkZTogU2tsdG5TZXJ2aWNlLFxuICAgICAgICB1c2VDbGFzczogU2tsdG5TZXJ2aWNlLFxuICAgICAgICBkZXBzOiBbIFNLTFROX0NPTkZJR19UT0tFTiBdLFxuICAgICAgfV1cbiAgICB9O1xuICB9XG59XG4iXX0=