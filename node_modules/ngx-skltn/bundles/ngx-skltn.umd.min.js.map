{"version":3,"sources":["ng://ngx-skltn/lib/directives/skltn-bone.directive.ts","ng://ngx-skltn/lib/services/skltn-config.service.ts","ng://ngx-skltn/lib/services/skltn.service.ts","ng://ngx-skltn/lib/skltn/skltn.component.ts","ng://ngx-skltn/lib/ngx-skltn.module.ts"],"names":["SkltnBoneDirective","element","this","Directive","args","selector","ElementRef","Input","ContentChild","SKLTN_CONFIG_TOKEN","InjectionToken","SkltnService","config","ids","defaultConfig","rectRadius","bgFill","flareFill","flareWidth","duration","delay","timing","Object","assign","Injectable","providedIn","Inject","SkltnComponent","skltnService","sanitizer","cd","zone","showSkltn","updStream$","Subject","conf","sufix","getSufixWithID","gradientId","maskId","prototype","onResize","event","next","ngOnInit","_this","animationCss","bypassSecurityTrustHtml","pipe","debounceTime","subscribe","calcShapes","href","window","location","runOutsideAngular","checkHrefIntervalID","setInterval","detectChanges","ngAfterViewInit","ngOnDestroy","clearInterval","Math","random","toString","substr","el","nativeElement","parentClientRect","getBoundingClientRect","viewBox","width","height","shapes","bones","toArray","map","bone","clientRect","radius","type","cx","x","cy","y","rx","ry","transform","pathWidth","pathHeight","toFixed","template","Component","DomSanitizer","ChangeDetectorRef","NgZone","ContentChildren","HostListener","NgxSkltnModule","forRoot","ngModule","providers","provide","useValue","useClass","deps","NgModule","declarations","imports","CommonModule","exports"],"mappings":"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","sourcesContent":["import { Directive, ElementRef, Input, ContentChild, TemplateRef } from '@angular/core';\n\n@Directive({\n  selector: '[skltn-bone]',\n})\nexport class SkltnBoneDirective {\n\n  @Input() type: 'rect' | 'circle' | 'path';\n  @Input() rectRadius: number;\n  @Input() pathWidth: number;\n  @Input() pathHeight: number;\n  @ContentChild('boneTemp') template: TemplateRef<any>;\n\n  constructor(\n    public element: ElementRef\n  ) { }\n\n}\n","import { InjectionToken } from '@angular/core';\nimport { SkltnConfig } from '../interfaces/skltn-config';\n\nexport const SKLTN_CONFIG_TOKEN = new InjectionToken<SkltnConfig>('SkltnConfig');\n\n","import { Injectable, Inject } from '@angular/core';\nimport { SkltnConfig } from '../interfaces/skltn-config';\nimport { SKLTN_CONFIG_TOKEN } from './skltn-config.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SkltnService {\n\n  ids: string[] = [];\n\n  config: SkltnConfig;\n\n  private defaultConfig: SkltnConfig = {\n    rectRadius: 4,\n    bgFill: '#ddd',\n    flareFill: 'rgba(255, 255, 255, 0.6)',\n    flareWidth: '150px',\n    duration: 1200,\n    delay: 0,\n    timing: 'ease-in-out',\n  };\n\n  constructor(\n    @Inject(SKLTN_CONFIG_TOKEN) config: SkltnConfig,\n  ) {\n    this.config = Object.assign({}, this.defaultConfig, config);\n  }\n\n}\n","import {\n  Component, OnInit, Input, ContentChildren, QueryList, ElementRef,\n  ChangeDetectorRef, HostListener, AfterViewInit, Inject, NgZone, OnDestroy,\n} from '@angular/core';\nimport { SkltnBoneDirective } from '../directives/skltn-bone.directive';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { SkltnConfig } from '../interfaces/skltn-config';\nimport { SkltnService } from '../services/skltn.service';\n\n@Component({\n  selector: 'skltn-root',\n  templateUrl: './skltn.component.html',\n  styleUrls: ['./skltn.component.scss']\n})\nexport class SkltnComponent implements OnInit, OnDestroy, AfterViewInit {\n\n  @Input() rectRadius: number;\n\n  @Input() bgFill: string;\n\n  @Input() flareFill: string;\n\n  @Input() flareWidth: string;\n\n  @Input() duration: number;\n\n  @Input() delay: number;\n\n  @Input() timing: string;\n\n  @Input() showSkltn = true;\n\n  @ContentChildren(SkltnBoneDirective) bones: QueryList<SkltnBoneDirective>;\n\n  viewBox: string;\n\n  shapes: any[];\n\n  parentClientRect: any;\n\n  animationCss: SafeHtml;\n\n  href: string;\n\n  sufix: string;\n\n  gradientId: string;\n\n  maskId: string;\n\n  checkHrefIntervalID: number;\n\n  updStream$ = new Subject();\n\n  defaultConfig: SkltnConfig = {\n    rectRadius: 4,\n    bgFill: '#ddd',\n    flareFill: 'rgba(255, 255, 255, 0.6)',\n    flareWidth: '150px',\n    duration: 1200,\n    delay: 0,\n    timing: 'ease-in-out',\n  };\n\n  constructor(\n    private skltnService: SkltnService,\n    private element: ElementRef,\n    private sanitizer: DomSanitizer,\n    private cd: ChangeDetectorRef,\n    private zone: NgZone,\n  ) {\n    const conf = this.skltnService.config;\n    this.rectRadius = conf.rectRadius;\n    this.bgFill = conf.bgFill;\n    this.flareFill = conf.flareFill;\n    this.flareWidth = conf.flareWidth;\n    this.duration = conf.duration;\n    this.delay = conf.delay;\n    this.timing = conf.timing;\n    this.sufix = this.getSufixWithID();\n    this.gradientId = 'gradient-' + this.sufix;\n    this.maskId = 'mask-' + this.sufix;\n  }\n\n  @HostListener('window:resize', ['$event'])\n  onResize(event: Event) {\n    this.updStream$.next();\n  }\n\n  ngOnInit() {\n    this.animationCss = this.sanitizer.bypassSecurityTrustHtml(`\n    <style>\n    @keyframes flareAnimation {\n        0% { x: calc(0% - ${this.flareWidth}); }\n        100% { x: 100%; }\n    }\n    .flare {\n      animation-name: flareAnimation;\n      animation-duration: ${this.duration}ms;\n      animation-timing-function: ${this.timing};\n      animation-iteration-count: infinite;\n      animation-delay: ${this.delay}ms;\n    }\n    </style>`);\n\n    // Update\n    this.updStream$.pipe(\n      debounceTime(100),\n    ).subscribe(() => this.calcShapes());\n\n    // Update href (Safari Bug, SVG Ref Path)\n    this.href = window.location.href;\n\n    this.zone.runOutsideAngular(() => {\n      this.checkHrefIntervalID = window.setInterval(() => {\n        if (this.href !== window.location.href) {\n          this.href = window.location.href;\n          this.cd.detectChanges();\n        }\n      }, 100);\n    });\n  }\n\n  ngAfterViewInit() {\n    this.calcShapes();\n    this.cd.detectChanges();\n  }\n\n  ngOnDestroy() {\n    if (this.checkHrefIntervalID) {\n      window.clearInterval(this.checkHrefIntervalID);\n    }\n  }\n\n  getSufixWithID(): string {\n    return Math.random().toString(36).substr(2, 4) + '-skltn';\n  }\n\n  calcShapes(): void {\n    // Root SVG Element\n    const el = this.element.nativeElement;\n    this.parentClientRect = el.getBoundingClientRect();\n    this.viewBox = `0 0 ${this.parentClientRect.width} ${this.parentClientRect.height}`;\n\n    // SVG Shapes\n    this.shapes = this.bones.toArray().map(bone => {\n      const boneEl = bone.element.nativeElement;\n      const clientRect = boneEl.getBoundingClientRect();\n      const radius = bone.rectRadius || this.rectRadius;\n      if (bone.type === 'circle') {\n        return {\n          type: 'circle',\n          cx: clientRect.x - this.parentClientRect.x + clientRect.width / 2,\n          cy: clientRect.y - this.parentClientRect.y + clientRect.height / 2,\n          rx: clientRect.width / 2,\n          ry: clientRect.height / 2,\n        };\n      }\n      if (bone.type === 'path') {\n        const x = clientRect.x - this.parentClientRect.x;\n        const y = clientRect.y - this.parentClientRect.y;\n        let transform = `translate(${x}, ${y})`;\n        if (bone.pathWidth && bone.pathHeight) {\n          const xScale = (clientRect.width / bone.pathWidth).toFixed(2);\n          const yScale = (clientRect.height / bone.pathHeight).toFixed(2);\n          transform += ` scale(${xScale}, ${yScale})`;\n        }\n        return {\n          type: 'path',\n          width: clientRect.width,\n          height: clientRect.height,\n          transform,\n          template: bone.template,\n        };\n      }\n      return {\n        type: 'rect',\n        x: clientRect.x - this.parentClientRect.x,\n        y: clientRect.y - this.parentClientRect.y,\n        width: clientRect.width,\n        height: clientRect.height,\n        rx: radius,\n        ry: radius,\n      };\n    });\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SkltnComponent } from './skltn/skltn.component';\nimport { SkltnBoneDirective } from './directives/skltn-bone.directive';\nimport { SkltnService } from './services/skltn.service';\nimport { SkltnConfig } from './interfaces/skltn-config';\nimport { SKLTN_CONFIG_TOKEN } from './services/skltn-config.service';\n\n@NgModule({\n  declarations: [\n    SkltnComponent,\n    SkltnBoneDirective,\n  ],\n  imports: [\n    CommonModule,\n  ],\n  exports: [\n    SkltnComponent,\n    SkltnBoneDirective,\n  ]\n})\nexport class NgxSkltnModule {\n  static forRoot(config: Partial<SkltnConfig> = {}): ModuleWithProviders {\n    return {\n      ngModule: NgxSkltnModule,\n      providers: [{\n        provide: SKLTN_CONFIG_TOKEN,\n        useValue: config,\n      },\n      {\n        provide: SkltnService,\n        useClass: SkltnService,\n        deps: [ SKLTN_CONFIG_TOKEN ],\n      }]\n    };\n  }\n}\n"]}