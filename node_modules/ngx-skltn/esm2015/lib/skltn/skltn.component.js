/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ContentChildren, QueryList, ElementRef, ChangeDetectorRef, HostListener, NgZone, } from '@angular/core';
import { SkltnBoneDirective } from '../directives/skltn-bone.directive';
import { DomSanitizer } from '@angular/platform-browser';
import { Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { SkltnService } from '../services/skltn.service';
export class SkltnComponent {
    /**
     * @param {?} skltnService
     * @param {?} element
     * @param {?} sanitizer
     * @param {?} cd
     * @param {?} zone
     */
    constructor(skltnService, element, sanitizer, cd, zone) {
        this.skltnService = skltnService;
        this.element = element;
        this.sanitizer = sanitizer;
        this.cd = cd;
        this.zone = zone;
        this.showSkltn = true;
        this.updStream$ = new Subject();
        this.defaultConfig = {
            rectRadius: 4,
            bgFill: '#ddd',
            flareFill: 'rgba(255, 255, 255, 0.6)',
            flareWidth: '150px',
            duration: 1200,
            delay: 0,
            timing: 'ease-in-out',
        };
        /** @type {?} */
        const conf = this.skltnService.config;
        this.rectRadius = conf.rectRadius;
        this.bgFill = conf.bgFill;
        this.flareFill = conf.flareFill;
        this.flareWidth = conf.flareWidth;
        this.duration = conf.duration;
        this.delay = conf.delay;
        this.timing = conf.timing;
        this.sufix = this.getSufixWithID();
        this.gradientId = 'gradient-' + this.sufix;
        this.maskId = 'mask-' + this.sufix;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        this.updStream$.next();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.animationCss = this.sanitizer.bypassSecurityTrustHtml(`
    <style>
    @keyframes flareAnimation {
        0% { x: calc(0% - ${this.flareWidth}); }
        100% { x: 100%; }
    }
    .flare {
      animation-name: flareAnimation;
      animation-duration: ${this.duration}ms;
      animation-timing-function: ${this.timing};
      animation-iteration-count: infinite;
      animation-delay: ${this.delay}ms;
    }
    </style>`);
        // Update
        this.updStream$.pipe(debounceTime(100)).subscribe((/**
         * @return {?}
         */
        () => this.calcShapes()));
        // Update href (Safari Bug, SVG Ref Path)
        this.href = window.location.href;
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.checkHrefIntervalID = window.setInterval((/**
             * @return {?}
             */
            () => {
                if (this.href !== window.location.href) {
                    this.href = window.location.href;
                    this.cd.detectChanges();
                }
            }), 100);
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.calcShapes();
        this.cd.detectChanges();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.checkHrefIntervalID) {
            window.clearInterval(this.checkHrefIntervalID);
        }
    }
    /**
     * @return {?}
     */
    getSufixWithID() {
        return Math.random().toString(36).substr(2, 4) + '-skltn';
    }
    /**
     * @return {?}
     */
    calcShapes() {
        // Root SVG Element
        /** @type {?} */
        const el = this.element.nativeElement;
        this.parentClientRect = el.getBoundingClientRect();
        this.viewBox = `0 0 ${this.parentClientRect.width} ${this.parentClientRect.height}`;
        // SVG Shapes
        this.shapes = this.bones.toArray().map((/**
         * @param {?} bone
         * @return {?}
         */
        bone => {
            /** @type {?} */
            const boneEl = bone.element.nativeElement;
            /** @type {?} */
            const clientRect = boneEl.getBoundingClientRect();
            /** @type {?} */
            const radius = bone.rectRadius || this.rectRadius;
            if (bone.type === 'circle') {
                return {
                    type: 'circle',
                    cx: clientRect.x - this.parentClientRect.x + clientRect.width / 2,
                    cy: clientRect.y - this.parentClientRect.y + clientRect.height / 2,
                    rx: clientRect.width / 2,
                    ry: clientRect.height / 2,
                };
            }
            if (bone.type === 'path') {
                /** @type {?} */
                const x = clientRect.x - this.parentClientRect.x;
                /** @type {?} */
                const y = clientRect.y - this.parentClientRect.y;
                /** @type {?} */
                let transform = `translate(${x}, ${y})`;
                if (bone.pathWidth && bone.pathHeight) {
                    /** @type {?} */
                    const xScale = (clientRect.width / bone.pathWidth).toFixed(2);
                    /** @type {?} */
                    const yScale = (clientRect.height / bone.pathHeight).toFixed(2);
                    transform += ` scale(${xScale}, ${yScale})`;
                }
                return {
                    type: 'path',
                    width: clientRect.width,
                    height: clientRect.height,
                    transform,
                    template: bone.template,
                };
            }
            return {
                type: 'rect',
                x: clientRect.x - this.parentClientRect.x,
                y: clientRect.y - this.parentClientRect.y,
                width: clientRect.width,
                height: clientRect.height,
                rx: radius,
                ry: radius,
            };
        }));
    }
}
SkltnComponent.decorators = [
    { type: Component, args: [{
                selector: 'skltn-root',
                template: "<div [innerHTML]=\"animationCss\"></div>\n\n<svg class=\"svg-root\" x=\"0px\" y=\"0px\" [attr.viewBox]=\"viewBox\" *ngIf=\"shapes?.length && showSkltn\">\n\n  <!-- Gradient -->\n  <linearGradient [attr.id]=\"gradientId\">\n      <stop class=\"stop stop--1\" [attr.stop-color]=\"flareFill\" stop-opacity=\"0\" offset=\"0\"></stop>\n      <stop class=\"stop stop--2\" [attr.stop-color]=\"flareFill\" stop-opacity=\"1\" offset=\"50%\"></stop>\n      <stop class=\"stop stop--3\" [attr.stop-color]=\"flareFill\" stop-opacity=\"0\" offset=\"100%\"></stop>\n    </linearGradient>\n\n  <defs>\n    <!-- Mask -->\n    <mask [attr.id]=\"maskId\">\n      <!-- Shapes -->\n      <ng-container *ngFor=\"let shape of shapes\">\n        <!-- Rect Type -->\n        <rect *ngIf=\"shape.type === 'rect'\" [attr.x]=\"shape.x\" [attr.y]=\"shape.y\" [attr.rx]=\"shape.rx\"\n          [attr.ry]=\"shape.ry\" [attr.width]=\"shape.width\" [attr.height]=\"shape.height\" fill=\"#FFFFFF\" />\n        <!-- Circle Type -->\n        <ellipse *ngIf=\"shape.type === 'circle'\" [attr.cx]=\"shape.cx\" [attr.cy]=\"shape.cy\" [attr.rx]=\"shape.rx\" [attr.ry]=\"shape.ry\" fill=\"#FFFFFF\"></ellipse>\n        <!-- Path Type -->\n        <ng-container *ngIf=\"shape.type === 'path'\">\n          <g fill=\"#FFFFFF\" [attr.transform]=\"shape.transform\">\n            <ng-container *ngTemplateOutlet=\"shape.template\"></ng-container>\n          </g>\n        </ng-container>\n      </ng-container>\n    </mask>\n  </defs>\n\n  <g [attr.mask]=\"'url(' + href + '#' + maskId + ')'\">\n    <!-- Background Rectangle -->\n    <rect class=\"bg-fill\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" [attr.fill]=\"bgFill\"></rect>\n\n    <!-- Flare -->\n    <rect class=\"flare\" [attr.x]=\"'-' + flareWidth\" y=\"0\" [attr.width]=\"flareWidth\" height=\"100%\" [attr.fill]=\"'url(' + href + '#' + gradientId + ')'\"></rect>\n  </g>\n\n</svg>\n\n<ng-content></ng-content>\n",
                styles: [":host{display:block;position:relative}.svg-root{display:block;position:absolute;top:0;bottom:0;left:0;right:0;z-index:1}"]
            }] }
];
/** @nocollapse */
SkltnComponent.ctorParameters = () => [
    { type: SkltnService },
    { type: ElementRef },
    { type: DomSanitizer },
    { type: ChangeDetectorRef },
    { type: NgZone }
];
SkltnComponent.propDecorators = {
    rectRadius: [{ type: Input }],
    bgFill: [{ type: Input }],
    flareFill: [{ type: Input }],
    flareWidth: [{ type: Input }],
    duration: [{ type: Input }],
    delay: [{ type: Input }],
    timing: [{ type: Input }],
    showSkltn: [{ type: Input }],
    bones: [{ type: ContentChildren, args: [SkltnBoneDirective,] }],
    onResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    SkltnComponent.prototype.rectRadius;
    /** @type {?} */
    SkltnComponent.prototype.bgFill;
    /** @type {?} */
    SkltnComponent.prototype.flareFill;
    /** @type {?} */
    SkltnComponent.prototype.flareWidth;
    /** @type {?} */
    SkltnComponent.prototype.duration;
    /** @type {?} */
    SkltnComponent.prototype.delay;
    /** @type {?} */
    SkltnComponent.prototype.timing;
    /** @type {?} */
    SkltnComponent.prototype.showSkltn;
    /** @type {?} */
    SkltnComponent.prototype.bones;
    /** @type {?} */
    SkltnComponent.prototype.viewBox;
    /** @type {?} */
    SkltnComponent.prototype.shapes;
    /** @type {?} */
    SkltnComponent.prototype.parentClientRect;
    /** @type {?} */
    SkltnComponent.prototype.animationCss;
    /** @type {?} */
    SkltnComponent.prototype.href;
    /** @type {?} */
    SkltnComponent.prototype.sufix;
    /** @type {?} */
    SkltnComponent.prototype.gradientId;
    /** @type {?} */
    SkltnComponent.prototype.maskId;
    /** @type {?} */
    SkltnComponent.prototype.checkHrefIntervalID;
    /** @type {?} */
    SkltnComponent.prototype.updStream$;
    /** @type {?} */
    SkltnComponent.prototype.defaultConfig;
    /**
     * @type {?}
     * @private
     */
    SkltnComponent.prototype.skltnService;
    /**
     * @type {?}
     * @private
     */
    SkltnComponent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    SkltnComponent.prototype.sanitizer;
    /**
     * @type {?}
     * @private
     */
    SkltnComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    SkltnComponent.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,