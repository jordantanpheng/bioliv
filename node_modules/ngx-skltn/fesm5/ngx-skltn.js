import { Directive, ElementRef, Input, ContentChild, InjectionToken, defineInjectable, inject, Injectable, Inject, Component, ChangeDetectorRef, NgZone, ContentChildren, HostListener, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { DomSanitizer } from '@angular/platform-browser';
import { Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SkltnBoneDirective = /** @class */ (function () {
    function SkltnBoneDirective(element) {
        this.element = element;
    }
    SkltnBoneDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[skltn-bone]',
                },] }
    ];
    /** @nocollapse */
    SkltnBoneDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    SkltnBoneDirective.propDecorators = {
        type: [{ type: Input }],
        rectRadius: [{ type: Input }],
        pathWidth: [{ type: Input }],
        pathHeight: [{ type: Input }],
        template: [{ type: ContentChild, args: ['boneTemp',] }]
    };
    return SkltnBoneDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var SKLTN_CONFIG_TOKEN = new InjectionToken('SkltnConfig');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SkltnService = /** @class */ (function () {
    function SkltnService(config) {
        this.ids = [];
        this.defaultConfig = {
            rectRadius: 4,
            bgFill: '#ddd',
            flareFill: 'rgba(255, 255, 255, 0.6)',
            flareWidth: '150px',
            duration: 1200,
            delay: 0,
            timing: 'ease-in-out',
        };
        this.config = Object.assign({}, this.defaultConfig, config);
    }
    SkltnService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    SkltnService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [SKLTN_CONFIG_TOKEN,] }] }
    ]; };
    /** @nocollapse */ SkltnService.ngInjectableDef = defineInjectable({ factory: function SkltnService_Factory() { return new SkltnService(inject(SKLTN_CONFIG_TOKEN)); }, token: SkltnService, providedIn: "root" });
    return SkltnService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SkltnComponent = /** @class */ (function () {
    function SkltnComponent(skltnService, element, sanitizer, cd, zone) {
        this.skltnService = skltnService;
        this.element = element;
        this.sanitizer = sanitizer;
        this.cd = cd;
        this.zone = zone;
        this.showSkltn = true;
        this.updStream$ = new Subject();
        this.defaultConfig = {
            rectRadius: 4,
            bgFill: '#ddd',
            flareFill: 'rgba(255, 255, 255, 0.6)',
            flareWidth: '150px',
            duration: 1200,
            delay: 0,
            timing: 'ease-in-out',
        };
        /** @type {?} */
        var conf = this.skltnService.config;
        this.rectRadius = conf.rectRadius;
        this.bgFill = conf.bgFill;
        this.flareFill = conf.flareFill;
        this.flareWidth = conf.flareWidth;
        this.duration = conf.duration;
        this.delay = conf.delay;
        this.timing = conf.timing;
        this.sufix = this.getSufixWithID();
        this.gradientId = 'gradient-' + this.sufix;
        this.maskId = 'mask-' + this.sufix;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    SkltnComponent.prototype.onResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.updStream$.next();
    };
    /**
     * @return {?}
     */
    SkltnComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.animationCss = this.sanitizer.bypassSecurityTrustHtml("\n    <style>\n    @keyframes flareAnimation {\n        0% { x: calc(0% - " + this.flareWidth + "); }\n        100% { x: 100%; }\n    }\n    .flare {\n      animation-name: flareAnimation;\n      animation-duration: " + this.duration + "ms;\n      animation-timing-function: " + this.timing + ";\n      animation-iteration-count: infinite;\n      animation-delay: " + this.delay + "ms;\n    }\n    </style>");
        // Update
        this.updStream$.pipe(debounceTime(100)).subscribe((/**
         * @return {?}
         */
        function () { return _this.calcShapes(); }));
        // Update href (Safari Bug, SVG Ref Path)
        this.href = window.location.href;
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.checkHrefIntervalID = window.setInterval((/**
             * @return {?}
             */
            function () {
                if (_this.href !== window.location.href) {
                    _this.href = window.location.href;
                    _this.cd.detectChanges();
                }
            }), 100);
        }));
    };
    /**
     * @return {?}
     */
    SkltnComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.calcShapes();
        this.cd.detectChanges();
    };
    /**
     * @return {?}
     */
    SkltnComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.checkHrefIntervalID) {
            window.clearInterval(this.checkHrefIntervalID);
        }
    };
    /**
     * @return {?}
     */
    SkltnComponent.prototype.getSufixWithID = /**
     * @return {?}
     */
    function () {
        return Math.random().toString(36).substr(2, 4) + '-skltn';
    };
    /**
     * @return {?}
     */
    SkltnComponent.prototype.calcShapes = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Root SVG Element
        /** @type {?} */
        var el = this.element.nativeElement;
        this.parentClientRect = el.getBoundingClientRect();
        this.viewBox = "0 0 " + this.parentClientRect.width + " " + this.parentClientRect.height;
        // SVG Shapes
        this.shapes = this.bones.toArray().map((/**
         * @param {?} bone
         * @return {?}
         */
        function (bone) {
            /** @type {?} */
            var boneEl = bone.element.nativeElement;
            /** @type {?} */
            var clientRect = boneEl.getBoundingClientRect();
            /** @type {?} */
            var radius = bone.rectRadius || _this.rectRadius;
            if (bone.type === 'circle') {
                return {
                    type: 'circle',
                    cx: clientRect.x - _this.parentClientRect.x + clientRect.width / 2,
                    cy: clientRect.y - _this.parentClientRect.y + clientRect.height / 2,
                    rx: clientRect.width / 2,
                    ry: clientRect.height / 2,
                };
            }
            if (bone.type === 'path') {
                /** @type {?} */
                var x = clientRect.x - _this.parentClientRect.x;
                /** @type {?} */
                var y = clientRect.y - _this.parentClientRect.y;
                /** @type {?} */
                var transform = "translate(" + x + ", " + y + ")";
                if (bone.pathWidth && bone.pathHeight) {
                    /** @type {?} */
                    var xScale = (clientRect.width / bone.pathWidth).toFixed(2);
                    /** @type {?} */
                    var yScale = (clientRect.height / bone.pathHeight).toFixed(2);
                    transform += " scale(" + xScale + ", " + yScale + ")";
                }
                return {
                    type: 'path',
                    width: clientRect.width,
                    height: clientRect.height,
                    transform: transform,
                    template: bone.template,
                };
            }
            return {
                type: 'rect',
                x: clientRect.x - _this.parentClientRect.x,
                y: clientRect.y - _this.parentClientRect.y,
                width: clientRect.width,
                height: clientRect.height,
                rx: radius,
                ry: radius,
            };
        }));
    };
    SkltnComponent.decorators = [
        { type: Component, args: [{
                    selector: 'skltn-root',
                    template: "<div [innerHTML]=\"animationCss\"></div>\n\n<svg class=\"svg-root\" x=\"0px\" y=\"0px\" [attr.viewBox]=\"viewBox\" *ngIf=\"shapes?.length && showSkltn\">\n\n  <!-- Gradient -->\n  <linearGradient [attr.id]=\"gradientId\">\n      <stop class=\"stop stop--1\" [attr.stop-color]=\"flareFill\" stop-opacity=\"0\" offset=\"0\"></stop>\n      <stop class=\"stop stop--2\" [attr.stop-color]=\"flareFill\" stop-opacity=\"1\" offset=\"50%\"></stop>\n      <stop class=\"stop stop--3\" [attr.stop-color]=\"flareFill\" stop-opacity=\"0\" offset=\"100%\"></stop>\n    </linearGradient>\n\n  <defs>\n    <!-- Mask -->\n    <mask [attr.id]=\"maskId\">\n      <!-- Shapes -->\n      <ng-container *ngFor=\"let shape of shapes\">\n        <!-- Rect Type -->\n        <rect *ngIf=\"shape.type === 'rect'\" [attr.x]=\"shape.x\" [attr.y]=\"shape.y\" [attr.rx]=\"shape.rx\"\n          [attr.ry]=\"shape.ry\" [attr.width]=\"shape.width\" [attr.height]=\"shape.height\" fill=\"#FFFFFF\" />\n        <!-- Circle Type -->\n        <ellipse *ngIf=\"shape.type === 'circle'\" [attr.cx]=\"shape.cx\" [attr.cy]=\"shape.cy\" [attr.rx]=\"shape.rx\" [attr.ry]=\"shape.ry\" fill=\"#FFFFFF\"></ellipse>\n        <!-- Path Type -->\n        <ng-container *ngIf=\"shape.type === 'path'\">\n          <g fill=\"#FFFFFF\" [attr.transform]=\"shape.transform\">\n            <ng-container *ngTemplateOutlet=\"shape.template\"></ng-container>\n          </g>\n        </ng-container>\n      </ng-container>\n    </mask>\n  </defs>\n\n  <g [attr.mask]=\"'url(' + href + '#' + maskId + ')'\">\n    <!-- Background Rectangle -->\n    <rect class=\"bg-fill\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" [attr.fill]=\"bgFill\"></rect>\n\n    <!-- Flare -->\n    <rect class=\"flare\" [attr.x]=\"'-' + flareWidth\" y=\"0\" [attr.width]=\"flareWidth\" height=\"100%\" [attr.fill]=\"'url(' + href + '#' + gradientId + ')'\"></rect>\n  </g>\n\n</svg>\n\n<ng-content></ng-content>\n",
                    styles: [":host{display:block;position:relative}.svg-root{display:block;position:absolute;top:0;bottom:0;left:0;right:0;z-index:1}"]
                }] }
    ];
    /** @nocollapse */
    SkltnComponent.ctorParameters = function () { return [
        { type: SkltnService },
        { type: ElementRef },
        { type: DomSanitizer },
        { type: ChangeDetectorRef },
        { type: NgZone }
    ]; };
    SkltnComponent.propDecorators = {
        rectRadius: [{ type: Input }],
        bgFill: [{ type: Input }],
        flareFill: [{ type: Input }],
        flareWidth: [{ type: Input }],
        duration: [{ type: Input }],
        delay: [{ type: Input }],
        timing: [{ type: Input }],
        showSkltn: [{ type: Input }],
        bones: [{ type: ContentChildren, args: [SkltnBoneDirective,] }],
        onResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }]
    };
    return SkltnComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxSkltnModule = /** @class */ (function () {
    function NgxSkltnModule() {
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    NgxSkltnModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        if (config === void 0) { config = {}; }
        return {
            ngModule: NgxSkltnModule,
            providers: [{
                    provide: SKLTN_CONFIG_TOKEN,
                    useValue: config,
                },
                {
                    provide: SkltnService,
                    useClass: SkltnService,
                    deps: [SKLTN_CONFIG_TOKEN],
                }]
        };
    };
    NgxSkltnModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        SkltnComponent,
                        SkltnBoneDirective,
                    ],
                    imports: [
                        CommonModule,
                    ],
                    exports: [
                        SkltnComponent,
                        SkltnBoneDirective,
                    ]
                },] }
    ];
    return NgxSkltnModule;
}());

export { NgxSkltnModule, SKLTN_CONFIG_TOKEN, SkltnBoneDirective, SkltnComponent, SkltnService };
//# sourceMappingURL=ngx-skltn.js.map
